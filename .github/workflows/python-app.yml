# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Clone repo in runner
      uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        export PYTHONPATH=src
        pytest
  build-and-push-docker-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
    
    - name: Clone repo in runner
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }} 

    - name: Build and push Docker images
      uses: docker/build-push-action@v4.0.0
      with:
        push: true
        tags: mislavhuddle/helloflask:${{ github.sha }}

  Deploy:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          repository: meslav-ye/python-app-deployment.git
          ref: main
          token: ${{ secrets.CHART_REPO_TOKEN }}

      - name: Get current version
        run: echo "Current version is $(cat python-app-service/Chart.yaml | grep version | cut -d ' ' -f 2)"

      - name: Increment version
        run: |
          VERSION=$(cat python-app-service/Chart.yaml | grep version | cut -d ' ' -f 2)
          NewVERSION=$(echo $VERSION | awk -F '.' '{print $1"."$2"."$3+1}')
          sed -i "s/version: $VERSION/version: $NewVERSION/g" python-app-service/Chart.yaml
          currTag=$(cat python-app-service/values.yaml | grep -w tag | awk {'print $2'})
          sed -i "s/tag: $currTag/tag: ${{ github.sha }}/g" "python-app-service/values.yaml"

      - name: Commit and push changes
        run: |
          git config --global user.email "misso998@gmail.com"
          git config --global user.name "Mislav Jelusic"
          git add .
          git commit -m "Update version to $(cat python-app-service/Chart.yaml | grep version | cut -d ' ' -f 2)"
          git push origin main


   
    
